
Sapling (Distributed Hash Table):
	-kademlia_4 contains most up-to-date version.

	DONE:
		-HashTable (storing on file system)
		-Store contact info on connection made.
		-Refresh values that are older than tRefresh time, using a cron-like method.
		-Node ID generation using ECDSA. (+ storing this information in a config file. single_use_key is on purpose not stored; losing the signature -> losing the node ID)
		-Side-step value storage for occupied keys.
		-Implement as Rack-app, using rack-rpc
		-Can be RPC-called from endpoints (non-nodes) now as well.
		-Nice Rack wrapper. Can be instantiated in one line now.
		-In the Rack stack, env['sapling_node'] can now be used to reference the node object directly.
		-Keccak now used as default Digest class.
		-BCrypt used as node-ID generation (and verification) hashing function. Cost 10 to not be too slow during verification.
		-Persist contact information.
		-Persistent Contacts storing. Possibly this means that BCrypt can become even harder (verification then only necessary when contact not yet in contact list)

	TODO:
		-Error on blocked port at start.
		-Proper Caching.

		-ensure find_node works as wanted (returning less than `k` nodes okay or not?)
		-Test running on multiple systems. (Local there seems to be a problem with XMLRPC + soft-threads that makes Client<->Server connection sometimes deadlock -> timeout)

		-BCrypt enforce minimum security level.
		-Make private what can be private in ./lib/node.rb



Distributed Hash Tree (DH3):
	TODO:
		-Connect to Distributed Hash Table implemented above.

		-implement higher-level functionality + example application.

		-Write new version of paper

Client-Side:
	DONE:
		-Key generation (SHA3(512))
		-Urlsafe Paddingless Base64
	
	TODO:
		-Node-ID-verifying. (ECDSA + BCrypt + SHA3(512))
		-Signature Generation (ECDSA)
			->ECDSA the problem right now.

		-Find multiple nodes from starting server; Request / Save data on those nodes (not just on starting server node). Pick node at random to mistify the keys you want to read/store.






File-Storage Application:
	-Flesh out tree structure.
	